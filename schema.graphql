type Query{
  auth:User
  test:String
  users:[User]
  products:[Product]
  getProduct(id: ID!):Product
  verifyPayment(token: ID!): VerifiedPayment!
  searchProduct(name: String, category: CategoryEnum, sort: String, limit: Int): [Product]
}

enum CategoryEnum {
  all
  Men
  Women
  Perfumes
  Jewelry
  electronics
}


type Product {
  id: ID
  title: String!
  price: Float!
  description: String
  image: String
  category: String
  rating: Rating
}

type User {
  username: String,
  email: String,
  picture: String,
}

type VerifiedPayment {
  reference: String!
  amount: Int!
  status: String!
  customerEmail: String!
  gatewayResponse: String!
}

type PaymentResponse {
  authorization_url: String!
  access_code: String!
  reference: String!
}

type Rating {
  rate: Float!
  count: Int!
}

input RatingInput {
  rate: Float!
  count: Int!
}

type DeleteResponse {
  acknowledged: Boolean!
  deletedCount: Int!
}

type DeletePayload {
    id: ID!
}

type Mutation {
  createNewProduct(input: CreateProductInput!): Product!
  initializePayment(email: String!, price: Float!): PaymentResponse
  updateProduct(id: ID!, input: UpdateProductInput!): Product!
  deleteProduct(id: ID!): DeleteResponse!
}

input UpdateProductInput {
  title: String
  description: String
  price: Float
  category: String
  image: String
  rating: RatingInput
}

input CreateProductInput {
  title: String!
  price: Float!
  description: String!
  category: String!
  image: String!
  rating: RatingInput!
}

type Subscription {
    authUpdate:User
    notifyNewProduct:Product
    notifyDeleteProduct: DeletePayload
    alertResponse:[PaymentResponse],
    test:String
}

